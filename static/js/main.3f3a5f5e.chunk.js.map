{"version":3,"sources":["util/interact.js","HelloWorld.js","App.js","reportWebVitals.js","index.js"],"names":["require","config","web3","createAlchemyWeb3","process","contractABI","contractAddress","helloWorldContract","eth","Contract","loadCurrentMessage","a","methods","message","call","connectWallet","window","ethereum","request","method","addressArray","obj","status","address","target","href","getCurrentWalletConnected","length","updateMessage","trim","transactionParameters","to","from","data","update","encodeABI","params","txHash","HelloWorld","useState","walletAddress","setWallet","setStatus","setMessage","newMessage","setNewMessage","useEffect","fetchMessage","fetchWallet","events","UpdatedMessages","error","returnValues","addWalletListener","connectWalletPressed","walletResponse","on","accounts","onUpdatePressed","id","onClick","String","substring","type","placeholder","onChange","e","value","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"i2CAAAA,EAAQ,KAAUC,SAClB,IAEMC,GAAOC,EADiBH,EAAQ,KAA9BG,mBADWC,uEAIbC,EAAcL,EAAQ,KACtBM,EAAkB,6CAEXC,EAAqB,IAAIL,EAAKM,IAAIC,SAC7CJ,EACAC,GAGWI,EAAkB,uCAAG,4BAAAC,EAAA,sEACVJ,EAAmBK,QAAQC,UAAUC,OAD3B,cAC1BD,EAD0B,yBAEzBA,GAFyB,2CAAH,qDAKlBE,EAAa,uCAAG,8BAAAJ,EAAA,0DACvBK,OAAOC,SADgB,0CAGID,OAAOC,SAASC,QAAQ,CACjDC,OAAQ,wBAJa,cAGjBC,EAHiB,OAMjBC,EAAM,CACVC,OAAQ,oEACRC,QAASH,EAAa,IARD,kBAUhBC,GAVgB,yDAYhB,CACLE,QAAS,GACTD,OAAQ,gBAAQ,KAAIT,UAdC,yDAkBlB,CACLU,QAAS,GACTD,OACE,+BACE,8BACG,IADH,eAEK,IACH,mBAAGE,OAAO,SAASC,KAAI,oCAAvB,2FAzBiB,yDAAH,qDAoCbC,EAAyB,uCAAG,4BAAAf,EAAA,0DACnCK,OAAOC,SAD4B,0CAGRD,OAAOC,SAASC,QAAQ,CACjDC,OAAQ,iBAJyB,aAG7BC,EAH6B,QAMlBO,OAAS,GANS,yCAO1B,CACLJ,QAASH,EAAa,GACtBE,OAAQ,sEATuB,gCAY1B,CACLC,QAAS,GACTD,OAAQ,iEAduB,mFAkB5B,CACLC,QAAS,GACTD,OAAQ,gBAAQ,KAAIT,UApBa,yDAwB9B,CACLU,QAAS,GACTD,OACE,+BACE,8BACG,IADH,eAEK,IACH,mBAAGE,OAAO,SAASC,KAAI,oCAAvB,2FA/B6B,0DAAH,qDA0CzBG,EAAa,uCAAG,WAAOL,EAASV,GAAhB,iBAAAF,EAAA,yDACtBK,OAAOC,UAAwB,OAAZM,EADG,yCAElB,CACLD,OACE,uFAJqB,UAQJ,KAAnBT,EAAQgB,OARe,yCASlB,CACLP,OAAQ,mDAVe,cAcrBQ,EAAwB,CAC5BC,GAAIzB,EACJ0B,KAAMT,EACNU,KAAM1B,EAAmBK,QAAQsB,OAAOrB,GAASsB,aAjBxB,kBAsBJnB,OAAOC,SAASC,QAAQ,CAC3CC,OAAQ,sBACRiB,OAAQ,CAACN,KAxBc,cAsBnBO,EAtBmB,yBA0BlB,CACLf,OACE,0CACI,IACF,mBAAGE,OAAO,SAASC,KAAI,0CAAqCY,GAA5D,+DAGA,uBALF,gHA5BqB,2DAwClB,CACLf,OAAQ,gBAAQ,KAAMT,UAzCC,0DAAH,wDCuBXyB,EA7GI,WAEjB,MAAmCC,mBAAS,IAA5C,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAA4BF,mBAAS,IAArC,mBAAOjB,EAAP,KAAeoB,EAAf,KACA,EAA8BH,mBAAS,iCAAvC,mBAAO1B,EAAP,KAAgB8B,EAAhB,KACA,EAAoCJ,mBAAS,IAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KAGAC,oBAAS,sBAAC,iBACOC,EADP,EAOOC,EAPP,WAAArC,EAAA,0FAAAA,EAAA,MAOR,gCAAAA,EAAA,sEACoCe,IADpC,gBACUH,EADV,EACUA,QAASD,EADnB,EACmBA,OACjBmB,EAAUlB,GACVmB,EAAUpB,GAHZ,2CAPQ,yBAOO0B,EAPP,+EAAArC,EAAA,MACR,4BAAAA,EAAA,sEACwBD,IADxB,OACQG,EADR,OAEE8B,EAAW9B,GAFb,2CADQ,yBACOkC,EADP,2CAKRA,IAYAxC,EAAmB0C,OAAOC,gBAAgB,IAAI,SAACC,EAAOlB,GAChDkB,EACFT,EAAU,gBAAQS,EAAMtC,UAExB8B,EAAWV,EAAKmB,aAAa,IAC7BP,EAAc,IACdH,EAAU,mDAXdM,IACAK,IAbQ,2CAcP,IAcH,IAAMC,EAAoB,uCAAG,4BAAA3C,EAAA,sEACEI,IADF,OACrBwC,EADqB,OAE3Bb,EAAUa,EAAejC,QACzBmB,EAAUc,EAAehC,SAHE,2CAAH,qDAM1B,SAAS8B,IACHrC,OAAOC,SACTD,OAAOC,SAASuC,GAAG,mBAAmB,SAACC,GACjCA,EAAS9B,OAAS,GACpBc,EAAUgB,EAAS,IACnBf,EAAU,uEAEVD,EAAU,IACVC,EAAU,oEAIdA,EACE,8BACG,IADH,eAEK,IACH,mBAAGlB,OAAO,SAASC,KAAI,oCAAvB,wFASR,IAAMiC,EAAe,uCAAG,8BAAA/C,EAAA,sEACGiB,EAAcY,EAAeI,GADhC,gBACdtB,EADc,EACdA,OACRoB,EAAUpB,GAFY,2CAAH,qDAMrB,OACE,sBAAKqC,GAAG,YAAR,UACE,6CACA,wBAAQA,GAAG,eAAeC,QAASN,EAAnC,SACGd,EAAcb,OAAS,EACtB,iCACAkC,OAAOrB,GAAesB,UAAU,EAAG,GACnC,MACAD,OAAOrB,GAAesB,UAAU,IAEhC,oDAIJ,gEACA,4BAAIjD,IAEJ,kEAEA,gCACE,uBACEkD,KAAK,OACLC,YAAY,6CACZC,SAAU,SAACC,GAAD,OAAOrB,EAAcqB,EAAE1C,OAAO2C,QACxCA,MAAOvB,IAET,mBAAGe,GAAG,gBAAN,SAAuBrC,IAEvB,wBAAQqC,GAAG,UAAUC,QAASF,EAA9B,mC,OCpGOU,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3f3a5f5e.chunk.js","sourcesContent":["require(\"dotenv\").config();\r\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\r\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\r\nconst web3 = createAlchemyWeb3(alchemyKey);\r\n\r\nconst contractABI = require(\"../contract-abi.json\");\r\nconst contractAddress = \"0xf28C62b7B1D41d0CAc736a24Cbcb4c7CE6602d9E\";\r\n\r\nexport const helloWorldContract = new web3.eth.Contract(\r\n  contractABI,\r\n  contractAddress\r\n);\r\n\r\nexport const loadCurrentMessage = async () => {\r\n  const message = await helloWorldContract.methods.message().call();\r\n  return message;\r\n};\r\n\r\nexport const connectWallet = async () => {\r\n  if (window.ethereum) {\r\n    try {\r\n      const addressArray = await window.ethereum.request({\r\n        method: \"eth_requestAccounts\",\r\n      });\r\n      const obj = {\r\n        status: \"👆🏽 Write a message in the text-field above.\",\r\n        address: addressArray[0],\r\n      };\r\n      return obj;\r\n    } catch (err) {\r\n      return {\r\n        address: \"\",\r\n        status: \"😥 \" + err.message,\r\n      };\r\n    }\r\n  } else {\r\n    return {\r\n      address: \"\",\r\n      status: (\r\n        <span>\r\n          <p>\r\n            {\" \"}\r\n            🦊{\" \"}\r\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n              You must install Metamask, a virtual Ethereum wallet, in your\r\n              browser.\r\n            </a>\r\n          </p>\r\n        </span>\r\n      ),\r\n    };\r\n  }\r\n};\r\n\r\nexport const getCurrentWalletConnected = async () => {\r\n  if (window.ethereum) {\r\n    try {\r\n      const addressArray = await window.ethereum.request({\r\n        method: \"eth_accounts\",\r\n      });\r\n      if (addressArray.length > 0) {\r\n        return {\r\n          address: addressArray[0],\r\n          status: \"👆🏽 Write a message in the text-field above.\",\r\n        };\r\n      } else {\r\n        return {\r\n          address: \"\",\r\n          status: \"🦊 Connect to Metamask using the top right button.\",\r\n        };\r\n      }\r\n    } catch (err) {\r\n      return {\r\n        address: \"\",\r\n        status: \"😥 \" + err.message,\r\n      };\r\n    }\r\n  } else {\r\n    return {\r\n      address: \"\",\r\n      status: (\r\n        <span>\r\n          <p>\r\n            {\" \"}\r\n            🦊{\" \"}\r\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n              You must install Metamask, a virtual Ethereum wallet, in your\r\n              browser.\r\n            </a>\r\n          </p>\r\n        </span>\r\n      ),\r\n    };\r\n  }\r\n};\r\n\r\nexport const updateMessage = async (address, message) => {\r\n  if (!window.ethereum || address === null) {\r\n    return {\r\n      status:\r\n        \"💡 Connect your Metamask wallet to update the message on the blockchain.\",\r\n    };\r\n  }\r\n\r\n  if (message.trim() === \"\") {\r\n    return {\r\n      status: \"❌ Your message cannot be an empty string.\",\r\n    };\r\n  }\r\n  //set up transaction parameters\r\n  const transactionParameters = {\r\n    to: contractAddress, // Required except during contract publications.\r\n    from: address, // must match user's active address.\r\n    data: helloWorldContract.methods.update(message).encodeABI(),\r\n  };\r\n\r\n  //sign the transaction\r\n  try {\r\n    const txHash = await window.ethereum.request({\r\n      method: \"eth_sendTransaction\",\r\n      params: [transactionParameters],\r\n    });\r\n    return {\r\n      status: (\r\n        <span>\r\n          ✅{\" \"}\r\n          <a target=\"_blank\" href={`https://ropsten.etherscan.io/tx/${txHash}`}>\r\n            View the status of your transaction on Etherscan!\r\n          </a>\r\n          <br />\r\n          ℹ️ Once the transaction is verified by the network, the message will\r\n          be updated automatically.\r\n        </span>\r\n      ),\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      status: \"😥 \" + error.message,\r\n    };\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport {\r\n  helloWorldContract,\r\n  connectWallet,\r\n  updateMessage,\r\n  loadCurrentMessage,\r\n  getCurrentWalletConnected,\r\n} from \"./util/interact.js\";\r\n\r\nconst HelloWorld = () => {\r\n  //state variables\r\n  const [walletAddress, setWallet] = useState(\"\");\r\n  const [status, setStatus] = useState(\"\");\r\n  const [message, setMessage] = useState(\"No connection to the network.\"); //default message\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n\r\n  //called only once\r\n  useEffect(async () => {\r\n    async function fetchMessage() {\r\n      const message = await loadCurrentMessage();\r\n      setMessage(message);\r\n    }\r\n    fetchMessage();\r\n    addSmartContractListener();\r\n    async function fetchWallet() {\r\n      const { address, status } = await getCurrentWalletConnected();\r\n      setWallet(address);\r\n      setStatus(status);\r\n    }\r\n    fetchWallet();\r\n    addWalletListener();\r\n  }, []);\r\n\r\n  function addSmartContractListener() {\r\n    helloWorldContract.events.UpdatedMessages({}, (error, data) => {\r\n      if (error) {\r\n        setStatus(\"😥 \" + error.message);\r\n      } else {\r\n        setMessage(data.returnValues[1]);\r\n        setNewMessage(\"\");\r\n        setStatus(\"🎉 Your message has been updated!\");\r\n      }\r\n    });\r\n  }\r\n\r\n  const connectWalletPressed = async () => {\r\n    const walletResponse = await connectWallet();\r\n    setStatus(walletResponse.status);\r\n    setWallet(walletResponse.address);\r\n  };\r\n\r\n  function addWalletListener() {\r\n    if (window.ethereum) {\r\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\r\n        if (accounts.length > 0) {\r\n          setWallet(accounts[0]);\r\n          setStatus(\"👆🏽 Write a message in the text-field above.\");\r\n        } else {\r\n          setWallet(\"\");\r\n          setStatus(\"🦊 Connect to Metamask using the top right button.\");\r\n        }\r\n      });\r\n    } else {\r\n      setStatus(\r\n        <p>\r\n          {\" \"}\r\n          🦊{\" \"}\r\n          <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n            You must install Metamask, a virtual Ethereum wallet, in your\r\n            browser.\r\n          </a>\r\n        </p>\r\n      );\r\n    }\r\n  }\r\n\r\n  const onUpdatePressed = async () => {\r\n    const { status } = await updateMessage(walletAddress, newMessage);\r\n    setStatus(status);\r\n  };\r\n\r\n  //the UI of our component\r\n  return (\r\n    <div id=\"container\">\r\n      <h1> Welcome ! </h1>\r\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\r\n        {walletAddress.length > 0 ? (\r\n          \"Currently connected to wallet \" +\r\n          String(walletAddress).substring(0, 6) +\r\n          \"...\" +\r\n          String(walletAddress).substring(38)\r\n        ) : (\r\n          <span>Connect Wallet</span>\r\n        )}\r\n      </button>\r\n\r\n      <h3>Current Message in blockchain:</h3>\r\n      <p>{message}</p>\r\n\r\n      <h3>New Message you want to display:</h3>\r\n\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Update the message in your smart contract.\"\r\n          onChange={(e) => setNewMessage(e.target.value)}\r\n          value={newMessage}\r\n        />\r\n        <p id=\"statusMessage\">{status}</p>\r\n\r\n        <button id=\"publish\" onClick={onUpdatePressed}>\r\n          Update Message\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HelloWorld;\r\n","import HelloWorld from \"./HelloWorld\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <HelloWorld></HelloWorld>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}